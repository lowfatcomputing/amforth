<?xml version="1.0" encoding="ISO-8859-1"?>

	<chapter id="Architecture">
		<title>Architecture</title>
		<sect1 id="Architectur_Overview">
			<title>Overview</title>
			<para> amforth is a 16 bit Forth implementing the indirect threading
				model. The flash memory contains the whole dictionary. A few EEPROM
				cells are used to hold initial values and the dictionary pointers.
				The RAM contains buffers, variables and the stacks.</para>
			<para> The compiler is a classic compiler without any optimization
				support.</para>
			<para> amforth uses most of the CPU registers to hold vital data: The
				data stack pointer, the instruction pointer, the user pointer, and
				the Top-Of-Stack cell. The hardware stack is used as the return
				stack. Some registers are used for temporary data in primitives.
			</para>
		</sect1>
		<sect1 id="Architecture_VM">
			<title>CPU -- Forth VM Mapping</title>
			<para>
				The default Forth registers are mapped as follows
				<table>
					<title>Register Mapping</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>Forth Register</entry>
								<entry>ATmega Register(s)</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>W: Working Register</entry>
								<entry>R24:R25</entry>
							</row>
							<row>
								<entry>IP: Instruction Pointer</entry>
								<entry>XH:XL (R27:R26)</entry>
							</row>
							<row>
								<entry>RSP: Return Stack Pointer</entry>
								<entry>SPH:SPL</entry>
							</row>
							<row>
								<entry> PSP: Parameter Stack Pointer</entry>
								<entry>YH:YL (R29:R28)</entry>
							</row>
							<row>
								<entry>UP: User Pointer</entry>
								<entry>R4:R5</entry>
							</row>
							<row>
								<entry>TOS: Top Of Stack</entry>
								<entry>R22:R23</entry>
							</row>
							<row>
								<entry>X: temporary (scratch pad) register</entry>
								<entry>ZH:ZL (R31:R30)</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
				<table>
					<title>Extended Forth VM Register Mapping</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>Forth Register</entry>
								<entry>ATmega Register(s)</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>A: Index and Scratch Register</entry>
								<entry>R6:R7</entry>
							</row>
							<row>
								<entry>B: Index and Scratch Register</entry>
								<entry>R8:R9</entry>
							</row>
						</tbody>
					</tgroup>
				</table>
			</para>
			<para> In addition the register pair R0:R1 is used internally e.g. to
				hold the the result of multiply operations. The register pair R2:R3
				is used as the zero value in many words. These registers must never
				be changed.</para>
			<para> The registers from R10 to R13 are currently unused, but may be
				used for the VM extended registers X and Y sometimes. The
				registers R14 to R21 are used as temporary registers and can be used
				freely within one module as temp0 to temp7.</para>
			<para>
				The forth core uses the
				<code>T</code>
				bit in the machine status register SREG for signalling an interrupt.
			</para>
		</sect1>
		<sect1 id="Core_System">
			<title>Core System</title>
			<sect2 id="THREADMODEL">
				<title>Threading Model</title>
				<para> amforth implements the classic indirect threaded variant of
					forth.</para>
			</sect2>
			<sect2 id="INNER_INTERPRETER">
				<title>Inner Interpreter</title>
				<para> For the indirect threading model an inner interpreter is
					needed. The inner interpreter does the interrupt handling too.
				</para>
				<sect3 id="II_EXECUTE">
					<title>EXECUTE</title>
					<para> This operation reads the cell the IP currently points to and
						uses the value read as the destination of a branch. This EXECUTE
						is not the forth word EXECUTE. The forth EXECUTE sets the IP from
						the data stack TOS element.</para>
				</sect3>
				<sect3 id="II_NEXT">
					<title>NEXT</title>
					<para> The NEXT routine is the core of the inner interpreter. It
						consists of 4 steps which are executed for every forth word.
					</para>
					<para>
						The first step in NEXT is to check whether an interrupt needs to
						be handled. It is done by looking at the
						<command>T</command>
						flag in the machine status register. If it is set, the code jumps
						to the interrupt handling part. If the flag is cleared the
						following normal NEXT routine runs.
					</para>
					<para> The next step is to read the cell the IP points to and
						stores this value in the W register. For a COLON word W contains
						the address of the code field.</para>
					<para> The 3rd step is to increase the IP register by 1.</para>
					<para> The 4th step is to read the content of the cell the W
						register points to. The value is stored in the scratch pad
						register X. The data in X is the address of the machine code to be
						executed in the last step.</para>
					<para> This last step finally jumps to the machine code pointed to
						by the X scratch pad register.</para>
				</sect3>
				<sect3 id="II_NEST">
					<title>NEST</title>
					<para> NEST (aka DO_COLON) first pushes the IP (which points to the
						next word to be executed when the current word is done) to the
						return stack. It then increments W by one flash cell, so that it
						points to the body of the (colon) word, and sets IP to point to
						that value. Then it continues with NEXT, which begins executing
						the words in the body of the (parent) colon word.</para>
				</sect3>
				<sect3 id="II_UNNEST">
					<title>UNNEST</title>
					<para>
						The code for UNNEST is the forth word
						<command>EXIT</command>
						in the dictionary. It reads the IP from the return stack and jumps
						to NEXT. The return stack pointer is incremented by 2 (1 flash
						cell).
					</para>
				</sect3>
				<sect3 id="II_DODOES">
					<title>DO_DOES</title>
					<para>
						This code is the runtime part of the forth word
						<command>DOES</command>
						. It pushes the current address of the MCU IP register onto the
						returnstack and jumps to DO_DOES. DO_DOES gets that address back,
						saves the current IP and sets the forth IP to the address it got
						from the stack. Finally it continues with NEXT.
					</para>
				</sect3>
			</sect2>
			<sect2 id="STACKS">
				<title>Stacks</title>
				<sect3 id="DATASTACK">
					<title>Data Stack</title>
					<para> The data stack uses the CPU register pair YH:YL as its data
						pointer. The Top-Of-Stack element (TOS) is in a register pair.
						Compared to a straight forward implementation this approach saves
						code space and gives higher execution speed (approx 10-20%). Saving even more stack
                        elements does not really provide a greater
                        benefit (much more code and only little speed
                        enhancements).
                    </para>
                    <para>
                        The data stack starts at a configurable distance
                        below the return stack (RAMEND) and grows
                        downward.
                    </para>
                </sect3>
                <sect3 id="RETURNSTACK">
                    <title>Return Stack</title>
                    <para>
                        The Return Stack is the hardware stack of the
                        controller. It is managed with push/pop
                        assembler instructions. The default return stack
                        starts at RAMEND und grows downward.
                    </para>
                </sect3>
            </sect2>
            <sect2 id="INTERRUPTS">
                <title>Interrupts</title>
                <para>
                    amforth routes the low level interrupts into the
                    forth inner interpreter. The inner interpreter
                    switches the execution to a predefined word if an
                    interrupt occurs. When that word finishes execution,
                    the interrupted word is continued. The interrupt
                    handlers are completly normal forth colon words
                    without any stack effect.
                </para>
                <para>
                    The processing of the interrupts takes two steps:
                    The first one is responsible for the low level part.
                    It is called whenever an interrupt occurs. The code
                    is the same for all interrupts. It takes the number
                    of the interrupt from its vector address and stores
                    this in a RAM cell. Then the low level ISR sets the
                    <command>T</command>
                    flag in the status register of the controller. The
                    inner interpreter checks this flag every time it is
                    entered and, if it is set, it switches to interrupt
                    handling at forth level. This approach has a penalty
                    of 2 CPU cycles for checking and skipping the branch
                    instruction to the isr forth code if no interrupt
                    occured.
                </para>
                <para>
                    The ISR at forth level is a RAM based table much
                    like the low level interrupt table of the execution
                    tokens associated with the interrupt number.
                </para>
                <para>
                    Interrupts from hardware sources (such as the usart)
                    may not work as expected. The reason is that the
                    interrupt source is not cleared within the generic
                    ISR. This leads to an immediate re-interrupt when
                    the ISR is left. There is currently no solution but
                    a custom ISR that clears the interrupt source and
                    calls the main ISR. This code has to be run within
                    the interrupt and cannot be (easily) turned into
                    forth code, since the forth inner interpreter is not
                    reentrant.
                    <!-- maybe run an forth
                        interpreter in background to handle interrupts? -->
                </para>
            </sect2>
            <sect2 id="MULTITASKING">
                <title>Multitasking</title>
                <para>
                    amforth does not implement multitasking directly. It
                    only provides the basic functions. Within IO words
                    the deferred word
                    <command>PAUSE</command>
                    is called whenever possible. This word is
                    initialized to do nothing (
                    <command>NOOP</command>
                    ).
                </para>
            </sect2>
            <sect2 id="EXCEPTIONS">
                <title>Exception Handling</title>
                <para>
                    amforth implements the
                    <command>CATCH</command>
                    and
                    <command>THROW</command>
                    exception handling. The outermost catch frame is
                    located at the interpreter level in the word
                    <command>QUIT</command>
                    . If an exception with the value -1 or -2 is thrown,
                    <command>QUIT</command>
                    will print a message and re-start itself. Other
                    values silently restart
                    <command>QUIT</command>
                    .
                </para>
            </sect2>
            <sect2 id="USERAREA">
                <title>User Area</title>
                <para>
                    The User Area is a special RAM storage area. It
                    contains the USER variables and the User deferred
                    definitions. Access is based upon the value of the
                    user pointer UP. It can be changed with the word
                    <command>UP!</command>
                    and read with
                    <command>UP@</command>
                    . The UP itself is stored in a register pair.
                </para>
                <para>
                    The size of the user area is defined at compile time
                    in the device definition section. This may change in
                    future versions.
                </para>
		
		<para>
		    The first USER area is located at the first heap address
		    (usually RAMSTART).
		</para>
				<table>
					<title>USER Area</title>
					<tgroup cols="2">
						<thead>
							<row>
								<entry>Addressoffset (bytes)</entry>
								<entry>Purpose</entry>
							</row>
						</thead>
						<tbody>
							<row>
								<entry>0</entry>
								<entry>Multitasker Status</entry>
							</row>
							<row>
								<entry>2</entry>
								<entry>Multitasker Follower</entry>
							</row>
							<row>
								<entry>4</entry>
								<entry>RP0</entry>
							</row>
							<row>
								<entry>6</entry>
								<entry>SP0</entry>
							</row>
							<row>
								<entry>8</entry>
								<entry>SP</entry>
							</row>
							<row>
								<entry>10</entry>
								<entry>HANDLER (exception handling)</entry>
							</row>
							<row>
								<entry>12</entry>
								<entry>BASE (number conversion)</entry>
							</row>
							<row>
								<entry>14</entry>
								<entry>EMIT (character IO)</entry>
							</row>

							<row>
								<entry>16</entry>
								<entry>EMIT? (character IO)</entry>
							</row>
							<row>
								<entry>18</entry>
								<entry>KEY</entry>
							</row>
							<row>
								<entry>20</entry>
								<entry>KEY?</entry>
							</row>
							<row>
								<entry>22</entry>
								<entry>/KEY</entry>
							</row>

						</tbody>
					</tgroup>
				</table>
		<para>
		
		</para>
                <para>
                    The User Area is used to provide task local
                    information. Without an active multitasker it
                    contains the starting values for the stackpointers,
                    the deferred words for terminal IO, the BASE
                    variable and the exception handler.
                </para>
                <para>
                    The multitasker uses the first 2 cells to store the
                    status and the link to the next entry in the task
                    list. In that situation the user area is/can be seen
                    as the task control block.
                </para>
		<para>
		    Beginning with release 3.7 the USER area has been split
		    into two parts. The first one called system user area contains
                    all the variabled described above. The second one is the application
                    user area that contains all variabled defined with the USER command.
		    The default application user area is empty and by default of size zero.
                </para>
            </sect2>
            <sect2 id="Wordlists">
              <title>Word Lists and Environment Queries</title>
              <para>
                 Wordlists and environment queries are implemented using the
                 same structure. They are based upon the simple linked list built
                 with <command>create</command>. The wordlist identifier is
                 a EEPROM address that holds the starting point address for the
                 wordlist search.
              </para>
              <para>
                 Environment queries are normal colon words. They are called within
                 <command>environment?</command> and leave there results at the data
                 stack.
              </para>
              <para>
                <command>find</command> uses an array of wordlist identifiers to
                search for the word. This list can be accessed with 
                <command>get-order</command> as well.
              </para>
            </sect2>
        </sect1>
        <sect1 id="Memory_Layout">
            <title>Memory Layout</title>
            <sect2 id="ML_FLASH">
                <title>Flash</title>
                <para>
                    The flash memory is divided into 5 sections. The
                    first section, starting at address 0, contains the
                    interrupt vector table for the low level interrupt
                    handling and a character string with the name of the
                    controller in plain text.
                </para>
                <para>
                    The next section is the initialization code block.
                    It is executed whenever the controller starts. The
                    code sets up the basic infrastructure for the forth
                    interpreter. This step is finished by calling the
                    forth interpreter with the word
                    <command>COLD</command>
                    as the entry word.
                </para>
                <para>
                    The 3rd section contains the low level interrupt
                    handling routines. The interrupt handler is very
                    closely tied to the inner interpreter. It is located
                    near the first section to use the faster relative
                    jump instructions.
                </para>
                <para>
                    The 4th section is the first part of the dictionary.
                    Nearly all colon words are located here. New words
                    are appended to this section. This section is filled
                    with FFFF cells when flashing the controller
                    initially.
                </para>
                <para>
                    The last section is identical to the boot loader
                    section of the ATmegas. It is also known as the NRWW
                    area. Here is the heart of amforth: The inner
                    interpreter and most of the words coded in assembly
                    language.
                </para>
            <para>
                <figure>
                <title>FLASH Structure Overview</title>
                <mediaobject>
                    <imageobject>
                    <imagedata fileref="flash-structure.png" format="PNG" scale="33"/>
                    </imageobject>
                    <imageobject>
                    <imagedata fileref="flash-structure.eps" format="EPS" scale="33"/>
                    </imageobject>
                </mediaobject><!--  <mediaobject>
                    <imageobject>                    
                    <imagedata fileref="flash2-structure.eps" format="EPS" scale="33"/>
                    </imageobject>
                </mediaobject> -->
                </figure>
                </para>
                <para>
                    The reason for this split is a technical one: to
                    work with a dictionary in flash the controller needs
                    to write to the flash. The ATmega architecture
                    provides a mechanism called self-programming by
                    using a special instruction and a rather complex
                    algorithm. This instruction only works in the boot
                    loader/NRWW section. amforth uses this instruction
                    in the word I!. Due to the fact that the self
                    programming is a lot more then only a simple
                    instruction, amforth needs most of the forth core
                    system to achieve it. A side effect is that amforth
                    cannot co-exist with classic bootloaders. If a
                    particular boot loader provides an API to enable
                    applications to call the flash write operation,
                    amforth can be restructured to use it. Currently
                    only very few and seldom used bootloaders exist that
                    enable this feature.
                </para>
                <para>
                    Atmegas can have more than 64 KB Flash. This
                    requires more than a 16 bit address, which is more
                    than the cell size. For one type of those bigger
                    atmegas there will be an solution with 16 bit cell
                    size: Atmega128 Controllers. They can use the whole
                    address range with an interpretation trick: The flash
                    addresses are in fact not byte addresses but word
                    addresses. Since amforth does not deal with bytes
                    but cells it is possible to use the whole address
                    range with a 16 bit cell. The Atmegas with 128
                    KBytes Flash operate slightly slower since the
                    address interpretation needs more code to access the
                    flash (both read and write). The source code uses
                    assembly macros to hide the differences.
                </para>
                <para>
                An alternative approach to place the elements in the flash shows picture
                . Here all code goes into the RWW section. This layout definitly needs a
                routine in the NRWW section that provides a cell level flash write functionality.
                The usual bootloaders do not have such an runtime accessible API, only the 
                DFU bootloader from atmel found on some USB enabled controllers does.
                <figure>
                <title>Alternative FLASH Structure</title>
                <mediaobject>
                    <imageobject>
                    <imagedata fileref="flash2-structure.png" format="PNG" scale="33"/>
                    </imageobject>
                    <imageobject>
                    <imagedata fileref="flash2-structure.eps" format="EPS" scale="33"/>
                    </imageobject>
                </mediaobject>
                </figure>
                The unused flash area beyond 0x1FFFF is not directly accessible for amforth.
                It could be used as a block device. 
                </para>
                
                <para>
                  This flash structure places the whole core system including the forth
                  compiler in the (large enough) bootloader section of the controller.
                  This enables the use of an undestroyable forth system since no application
                  can overwrite the bootloader section. 
                <figure>
                <title>All-High Alternative FLASH Structure</title>
                <mediaobject>
                    <imageobject>
                    <imagedata fileref="flash3-structure.png" format="PNG" scale="33"/>
                    </imageobject>
                    <imageobject>
                    <imagedata fileref="flash3-structure.eps" format="EPS" scale="33"/>
                    </imageobject>
                </mediaobject>
                </figure>
                  Some additional words may be useful
                  to reset the user defined data space to some inital (empty) state. This
                  scenario is  obviously usable for bigger atmegas only.
                </para>

                <sect3>
                    <title>Flash Write</title>
                    <para>
                        The word performing the actual flash write
                        operation is
                        <command>I!</command>
                        (i-store). This word takes the value and the
                        address of a single cell to be written to flash
                        from the data stack. The address is a word
                        address, not a byte address!
                    </para>
                    <para>
                        The flash write strategy follows Atmel's
                        appnotes. The first step is turning off all
                        interrupts. Then the affected flash page is read
                        into the flash page buffer. While doing the
                        copying a check is performed whether a flash
                        erase cycle is needed. The flash erase can be
                        avoided if no bit is turned from 0 to 1. Only if
                        a bit is switched from 0 to 1 must a flash page
                        erase operation be done. In the fourth step the
                        new flash data is written and the flash is set
                        back to normal operation and the interrupt flag
                        is restored. The whole process takes a few
                        milliseconds.
                    </para>
                    <para>
                        This write strategy ensures that the flash has
                        minimal flash erase cycles while extending the
                        dictionary. In addition it keeps the forth
                        system simple since it does not need to deal
                        with page sizes or RAM based buffers for
                        dictionary operations.
                    </para>
                </sect3>
            </sect2>
            <sect2 id="ML_EEPROM">
                <title>EEPROM</title>
                <para>
                    The built-in EEPROM contains vital dictionary
                    pointer and other persistent data. They need only a
                    few EEPROM cells. The remaining space is available
                    for user programs. The easiest way to use EEPROM is
                    the use of forth VALUEs. There intended design
                    pattern (read often, write seldom) is like that for
                    the typical EEPROM usage.
                </para>
                <para>
                    Another use for EEPROM cells is to hold execution
                    tokens. The default system uses this for the turnkey
                    vector. This is an EEPROM variable that reads and
                    executes the XT at runtime. It is based on the
                    DEFER/IS standard. To define a deferred word in the
                    EEPROM use the Edefer defintion word. The standard
                    word IS is used to put a new XT into it.
                </para>
                <para>
                    Low level space management is done through the the
                    EDP variable. This is not a forth value but a EEPROM
                    based variable. To read the current value an
                    <command>e@</command>
                    operation must be used, changes are written back
                    with
                    <command>e!</command>
                    . It contains the highest EEPROM address currently
                    allocated. The name is based on the DP variable,
                    which points to the highest dictionary address.
                </para>
            </sect2>
            <sect2 id="ML_RAM">
                <title>RAM</title>
                <para>
                    The RAM address space is divided into three
                    sections: the first 32 addresses are the CPU
                    registers. Above come the IO registers and extended
                    IO registers and finally the RAM itself.
                </para>
                <para>
                    amforth needs very little RAM space for its
                    internal data structures. The biggest part are the
                    buffers for the terminal IO. In general RAM is managed
                    with the words <command>VARIABLE</command> and
                    <command>ALLOT</command>. 
                </para>
                <para>
                  Forth defines a few transient buffer regions for varios purposes.
                  The most important is PAD, the scratch buffer. It is located 100 bytes
                  above the current HEAP and goes to upper addresses. The Pictured Numeric 
                  Output is just at PAD and grows downward. The word WORD uses the area above
                  HEAP as it's buffer to store the just recognized word from SOURCE.
                </para>
                <para>
                <xref linkend="RAM_FIGURE"/> shows an ram layout that can be used on systems
                without external RAM. All elements are located within the internal
                memory pool.
                <figure id="RAM_FIGURE">
                <title>RAM Structure Overview</title>
                <mediaobject>
                    <imageobject>
                    <imagedata fileref="ram-structure.png" format="PNG" scale="33"/>
                    </imageobject>
                    <imageobject>
                    <imagedata fileref="ram-structure.eps" format="EPS" scale="33"/>
                    </imageobject>
                </mediaobject>
                </figure>
                Another layout, that makes the external RAM easily available is shown in
                <xref linkend="RAM2_FIGURE"/>. Here are the stacks at the beginning of the internal RAM and the
                heap and all other buffers grow directly into the external data space. From
                an application point of view there is not difference but a speed penalty when
                working with external RAM instead of internal.
                <figure id="RAM2_FIGURE">
                <title>RAM Structure Overview</title>
                <mediaobject>
                    <imageobject>
                    <imagedata fileref="ram2-structure.png" format="PNG" scale="33"/>
                    </imageobject>
                    <imageobject>
                    <imagedata fileref="ram2-structure.eps" format="EPS" scale="33"/>
                    </imageobject>
                </mediaobject>
                </figure>
                
                </para>
                <para>
                    With amforth all three sections can be accessed
                    using their RAM addresses. That makes it quite easy
                    to work with words like
                    <command>C@</command>
                    . The word
                    <command>!</command>
                    implements a LSB byte order: The lower part of the
                    cell is stored at the lower address.
                </para>
                <para>
                    For the RAM there is the word
                    <command>Rdefer</command>
                    which defines a deferred word, placed in RAM. As a
                    special case there is the word
                    <command>Udefer</command>
                    , which sets up a deferred word in the user area. To
                    put an XT into them the word
                    <command>IS</command>
                    is used. This word is smart enough to distinguish
                    between the various Xdefer definitions.
                </para>
            </sect2>
        </sect1>
    </chapter>
