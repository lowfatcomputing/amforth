    <chapter id="Library">
        <title>Library</title>
        <para>
            Amforth does not have a formal library concept. Amforth has
            a lot of forth code that can be seen as a library of words
            and commands.
        </para>
        <sect1 id="Hardware_Access">
            <title>Hardware Access</title>
            <para>
                In the
                <filename>device/</filename>
                subdirectory are the controller specific register
                definitions. They are taken directly from the appnotes
                from Atmel. The register names are all uppercase. It is
                recommended to extract only the needed definitions since
                the whole list occupy a lot of flash memory.
            </para>
            <para>
                Some commonly used low level words can be included with
                the
                <filename>dict_mcu.inc</filename>
                include file at compile time.
            </para>
        </sect1>
        <sect1 id="Multitasking">
                <title>Multitasking</title>
                <para>
                    The Library contains a cooperative multitasker in
                    the file
                    <filename>multitask.frt</filename>
                    . It defines a command
                    <command>multitaskpause</command>
                    which can assigned to
                    <command>pause</command>
                    :
                    <code>' multitaskpause is pause</code>
                </para>
                <para>
                    The multitasker has the following commands
                    <variablelist>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>onlytask</command>
                                    <arg choice="plain">(--)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Initialize the task system. The
                                    current task is placed as the only
                                    task in the task list.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>alsotask</command>
                                    <arg choice="plain">(tid --)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Append a newly created task to the
                                    task list. A running multitasker is
                                    temporarily stopped. Make sure that
                                    the status of the task is sleep.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>task</command>
                                    <arg choice="plain">
                                        ( dstacksize rstacksize -- tid )
                                    </arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Allocate RAM for the task control
                                    block (aka user area) and the two
                                    stacks. Initializes the whole user
                                    area to direct IO to the serial
                                    line. The task has still no code
                                    associated and is not inserted to
                                    the task list.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>task-sleep</command>
                                    <arg choice="plain">( tid --)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Let the (other) task sleep. The task
                                    switcher skips the task on the next
                                    round. When a task executes this
                                    command for itself, the task
                                    continues until the next call of
                                    <command>pause</command>
                                    .
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>task-awake</command>
                                    <arg choice="plain">( tid --)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    The task is put into runnable mode.
                                    It is not activated immediately.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>activate</command>
                                    <arg choice="plain">( tid --)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Skip all of the remaining code in
                                    the current colon word and continue
                                    the skipped code as task when the
                                    task list entry is reached by the
                                    multitasker.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <para>
                    It is possible to use a timer interrupt to call the
                    command
                    <command>pause</command>
                    and turn the cooperative multitasker into a
                    preemptive one. The latency is in the worst case
                    that of the longest running uninterruptable forth
                    commands:
                    <command>1ms</command>
                    ,
                    <command>!i</command>
                    and
                    <command>!i</command>
                    . For a preemptive task switcher a lot more tools
                    like semaphores may be needed.
                </para>
            </sect1>
            <sect1 id="TWI_I2C">
                <title>TWI / I2C</title>
                <para>
                    The file
                    <filename>twi.frt</filename>
                    contains the basic words to operate with the
                    hardware TWI module of the microcontroller. The file
                    <filename>twi-eeprom.frt</filename>
                    uses these words to implement a native block buffer
                    access for I2C EEPROMs with 2byte addresses.
                </para>
                <para>
                    The word
                    <command>+twi</command>
                    initializes the TWI hardware module with the
                    supplied parameters.
                    <command>-twi</command>
                    turns the module off. The start-stop conditions are
                    sent with the
                    <command>twi.start</command>
                    and
                    <command>twi.stop</command>
                    words. Data is transferred with the three words
                    <command>twi.tx</command>
                    for transmitting (sending) a byte,
                    <command>twi.rx</command>
                    for reading a byte (and sending an ACK signal) and
                    <command>twi.rxn</command>
                    for reading a byte and sending a NACK signal.
                </para>
                <para>
                    The command
                    <command>twi.status</command>
                    fetches the TWI status register, the command
                    <command>twi.status?</command>
                    compares the status with a predefined value and
                    throws the exception -14 if they do not match.
                </para>
                <para>
                    The command
                    <command>twi.scan</command>
                    scans the whole (7 bit) address range and prints the
                    address of any device found.
                </para>
        </sect1>
		<sect1 id="TimerModule">
		   <title>Timer Module</title>
		   <para>
		     The timer modules consist of a number of files in the <filename>lib/hardware</filename> directory.
		     The bottom layer provides basic access to the timers as millisecond
		     tick sources. The next layer in the file <filename>lib/hardware/timer.frt</filename> 
		     uses one of the lower level files as the source for its own services.
		   </para>
		   <para>
		     The timer modules uses simple forth code. This is made possible due to
		     the highly sophisticated interrupt system of amforth. With it any assembler
		     word can be considered atomic and non-interruptable. The relevant points
		     for the timer module are the atomic increment 1+ used in the interrupt service
		     word and the atomic 16bit read operation @ when accessing the actual value.
		   </para>
		   <sect2 id="BasicTimerModule">
		     <title>Basic Timer Access</title>
		   <para>
		     The basic drivers have words to initialize and start/stop the timers.
		     As a convention, all words start with timerX, X beeing the number of
		     the timer. The timer counter gets incremented every millisecond. 
		     The <filename>timer.frt</filename> uses
		     the millisecond counter to provide easy-to-use generic timer related
		     tasks.
		    </para>
		    <para>
		       <variablelist>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>timerX.tick</command>
                                    <arg choice="plain">(-- addr)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Address of the counter variable as unsigned number. 
                                    It is expected to increase every millisecond. Warps 
                                    around every 65 seconds.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>timerX.preload</command>
                                    <arg choice="plain">( -- addr)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Address of the preload number that the counter 
                                    gets initialized to every time it fires.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>timerX.init</command>
                                    <arg choice="plain">( preload -- )</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Sets the preload number to the given value and assigns the overflow interrupt
                                    service routine.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>timerX.start</command>
                                    <arg choice="plain">( -- )</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Sets the tick to 0, enables the interrupt and starts the timer.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>timerX.stop</command>
                                    <arg choice="plain">( -- )</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    disables the overflow interrupt and stops the timer.
                                </para>
                            </listitem>
                        </varlistentry>

                  </variablelist>
		   </para>
		   </sect2>
		   <sect2 id="GenericTimerModule">
		     <title>Timer Access</title>
		   <para>
		     The <filename>timer.frt</filename> modules provides a few general purpose words for
		     timed actions. They depend on the basic timer modules.
		    </para>
		    <para>
		       <variablelist>
		               <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>@tick</command>
                                    <arg choice="plain">( -- u)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Gets the current value of the ticker, the number can be used
                                    as input for any of the following words.
                                    <command>pause</command> internally.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>expired?</command>
                                    <arg choice="plain">( u -- f)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Checks whether a timer has expired. The timer is the initial
                                    tick value. The maximum time range is 65 seconds. It calls
                                    <command>pause</command> internally.
                                </para>
                            </listitem>
                        </varlistentry>

                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>elapsed</command>
                                    <arg choice="plain">( u1 -- u2 )</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Time in milliseconds since the timer u1 has started.
                                    The maximum time range is 65 seconds.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>after</command>
                                    <arg choice="plain">( XT u -- )</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Execute the XT after waiting u milliseconds.
                                    The remaining stack effect is what the executed
                                    word does.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>every</command>
                                    <arg choice="plain">( XT u -- )</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Execute the XT every u milliseconds. The executed
                                    word should not have any stack effect.
                                </para>
                            </listitem>
                        </varlistentry>
                  </variablelist>
		   </para>
		   <para>
		     To make use of the counters, just get the initial counter value and use as
		     the input to any of the timing words. An alternative implementation
		     of the standard word <command>ms</command> illustrate it: 
		     <code> ms @tick + begin dup expired? until drop ;</code>
		   </para>
		   </sect2>
		</sect1>
    </chapter>
