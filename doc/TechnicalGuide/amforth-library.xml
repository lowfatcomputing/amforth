    <chapter id="Library">
        <title>Library</title>
        <para>
            Amforth does not have a formal library concept. Amforth has
            a lot of forth code that can be seen as a library of words
            and commands.
        </para>
        <sect1 id="Hardware_Access">
            <title>Hardware Access</title>
            <para>
                In the
                <filename>device/</filename>
                subdirectory are the controller specific register
                definitions. They are taken directly from the appnotes
                from Atmel. The register names are all uppercase. It is
                recommended to extract only the needed definitions since
                the whole list occupy a lot of flash memory.
            </para>
            <para>
                Some commonly used lowlevel words can be included with
                the
                <filename>dict_mcu.inc</filename>
                include file at compile time.
            </para>
        </sect1>
        <sect1 id="Modules">
            <title>Software Modules</title>
            <sect2 id="Multitasking">
                <title>Multitasking</title>
                <para>
                    The Library contains a cooperative multitasker in
                    the file
                    <filename>multitask.frt</filename>
                    . It defines a command
                    <command>multitaskpause</command>
                    which can assigned to
                    <command>pause</command>
                    :
                    <code>' multitaskpause is pause</code>
                </para>
                <para>
                    The multitasker has the following commands
                    <variablelist>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>onlytask</command>
                                    <arg choice="plain">(--)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Initialize the task system. The
                                    current task is placed as the only
                                    task in the task list.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>alsotask</command>
                                    <arg choice="plain">(tid --)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Append a newly created task to the
                                    task list. A running multitasker is
                                    temporarily stopped. Make sure that
                                    the status of the task is sleep.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>task</command>
                                    <arg choice="plain">
                                        ( dstacksize rstacksize -- tid )
                                    </arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Allocate RAM for the task control
                                    block (aka user area) and the two
                                    stacks. Initializes the whole user
                                    area to direct IO to the serial
                                    line. The task has still no code
                                    associated and is not inserted to
                                    the task list.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>task-sleep</command>
                                    <arg choice="plain">( tid --)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Let the (other) task sleep. The task
                                    switcher skips the task on the next
                                    round. When a task executes this
                                    command for itself, the task
                                    continues until the next call of
                                    <command>pause</command>
                                    .
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>task-awake</command>
                                    <arg choice="plain">( tid --)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    The task is put into runnable mode.
                                    It is not activated immediately.
                                </para>
                            </listitem>
                        </varlistentry>
                        <varlistentry>
                            <term>
                                <cmdsynopsis>
                                    <command>activate</command>
                                    <arg choice="plain">( tid --)</arg>
                                </cmdsynopsis>
                            </term>
                            <listitem>
                                <para>
                                    Skip all of the remaining code in
                                    the current colon word and continue
                                    the skipped code as task when the
                                    task list entry is reached by the
                                    multitasker.
                                </para>
                            </listitem>
                        </varlistentry>
                    </variablelist>
                </para>
                <para>
                    It is possible to use a timer interrupt to call the
                    command
                    <command>pause</command>
                    and turn the cooperative multitasker into a
                    preemptive one. The latency is in the worst case
                    that of the longest running uninterruptable forth
                    commands:
                    <command>1ms</command>
                    ,
                    <command>!i</command>
                    and
                    <command>!i</command>
                    . For a preemptive task switcher a lot more tools
                    like semaphores may be needed.
                </para>
            </sect2>
            <sect2 id="TWI_I2C">
                <title>TWI / I2C</title>
                <para>
                    The file
                    <filename>twi.frt</filename>
                    contains the basic words to operate with the
                    hardware TWI module of the microcontroller. The file
                    <filename>twi-eeprom.frt</filename>
                    uses these words to implement a native block buffer
                    access for I2C EEPROMs with 2byte addresses.
                </para>
                <para>
                    The word
                    <command>+twi</command>
                    initializes the TWI hardware module with the
                    supplied parameters.
                    <command>-twi</command>
                    turns the module off. The start-stop conditions are
                    sent with the
                    <command>twi.start</command>
                    and
                    <command>twi.stop</command>
                    words. Data is transferred with the three words
                    <command>twi.tx</command>
                    for transmitting (sending) a byte,
                    <command>twi.rx</command>
                    for reading a byte (and sending an ACK signal) and
                    <command>twi.rxn</command>
                    for reading a byte and sending a NACK signal.
                </para>
                <para>
                    The command
                    <command>twi.status</command>
                    fetches the TWI status register, the command
                    <command>twi.status?</command>
                    compares the status with a predefined value and
                    throws the exception -14 if they do not match.
                </para>
                <para>
                    The command
                    <command>twi.scan</command>
                    scans the whole (7 bit) address range and prints the
                    address of any device found.
                </para>
            </sect2>
            <sect2 id="I2CEEPROM">
                <title>I2C EEPROM</title>
                <para>
                    I2C EEPROMs can be used in varios ways. The file
                    <filename>twi-eeprom.frt</filename>
                    defines words to access the EEPROM at byte address
                    level and at block level. A page is the native block
                    size of the eeprom device, that is stored in the
                    <command>VALUE</command>
                    <command>twi.ee-b/blk</command>
                    . The hardware (i2c-) device address is stored in
                    the value
                    <command>twi.ee-addr</command>
                    . Currently EEPROM devices with 2byte addresses are
                    supported.
                </para>
                <para>
                    Byte level access is done with the words
                    <command>twi.ee-c!</command>
                    and
                    <command>twi.ee-c@</command>
                    . They transfer one byte from/to the eeprom address
                    given. The stack diagram is exactly the same as for
                    the RAM
                    <command>c@</command>
                    /
                    <command>c!</command>
                    . Every store operation performes an full EEPROM
                    erase/write cycle.
                </para>
                <para>
                    To transfer more bytes the block level words can be
                    used. The transfer a whole EEPROM page to/from RAM.
                    The first page is at address 0, page 1 starts at
                    address
                    <command>twi.ee-b/blk</command>
                    .
                </para>
            </sect2>
        </sect1>
    </chapter>