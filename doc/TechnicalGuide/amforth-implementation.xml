    <chapter id="Implementation">
        <title>Implementation</title>
        <sect1 id="ANS94">
            <title>ANS94 Words</title>
            <para>
            amforth is close to the ANS94 Forth standard. The main difference comes from
            the fact that the AVR ATmegas use a Harvard architecture (separate code and
            data address space) that amforth does not hide. amforth gives full and unmodified
            access to the whole address space.  
            </para>
            <para>
                amforth implements most or all words from the ANS word
                sets CORE, CORE EXT, EXCEPTION and DOUBLE NUMBERS. A loadable
                floating point library that contains the basic routines is
                available. Words from the word sets LOCALS and FILE-ACCESS
                are dropped completely. The others are partially implemented.
            </para>
            <sect2 id="ANS_CORE">
                <title>Core and Core EXT</title>
                <para>
                    Al words from the CORE word set are available. CORE EXT drops 
                    the words C", CONVERT, EXPECT, SPAN, and  ROLL.
                </para>
                <para>
                    Loop counters are checked on signed compares.
                </para>
            </sect2>
            <sect2 id="ANS_BLOCK">
                <title>Block</title>
                <para>
                    amforth has limited block support with I2C/TWI
                    serial eeprom chips with 2 byte addresses.
                </para>
            </sect2>
            <sect2 id="ANS_DOUBLENUMBER">
                <title>Double Number</title>
                <para>
                    Double cell numbers work as expected. Not all words
                    are implemented. Entering them directly using the
                    dot- notation work for dots at the end of the number, 
                    not if the dot is somewhere within it.
                </para>
            </sect2>
            <sect2 id="ANS_EXCEPTION">
                <title>Exception</title>
                <para>
                    Exceptions are fully supported. The words
                    <command>ABORT</command>
                    and
                    <command>ABORT"</command>
                    use them internally.
                </para>
                <para>
                    The
                    <command>THROW</command>
                    codes -1, -2 and -13 work as specified.
                </para>
                <para>
                    The implementation is based upon a variable HANDLER
                    which holds the current return stack pointer
                    position. This variable is a USER variable.
                </para>
            </sect2>
            <sect2 id="ANS_FACILITY">
                <title>Facility</title>
                <para>
                    The basic system uses the
                    <command>KEY?</command>
                    and
                    <command>EMIT?</command>
                    words as deferred words in the USER area.
                </para>
                <para>
                    The word
                    <command>MS</command>
                    is implemented with the word
                    <command>1MS</command>
                    which busy waits almost exactly 1 millisecond. The
                    calculation is based upon the frequency specified at
                    compile time.
                </para>
                <para>
                    The words
                    <command>TIME&amp;DATE</command>
                    ,
                    <command>EKEY</command>
                    ,
                    <command>EKEY>CHAR</command>
                    are not implemented.
                </para>
                <para>
                    To control a VT100 terminal the words
                    <command>AT-XY</command>
                    and
                    <command>PAGE</command>
                    are written in forth code. They emit the ANSI
                    control codes according to the VT100 terminal codes.
                </para>
            </sect2>
            <sect2 id="ANS_FILEACCESS">
                <title>File Access</title>
                <para>
                    amforth does not have filesystem support. It does
                    not contain any words from this word set.
                </para>
            </sect2>
            <sect2 id="ANS_FLOATINGPOINT">
                <title>Floating Point</title>
                <para>
                    amforth has a loadable floating point library. It contains
                    the basic words to deal with single precision floats. The floats
                    are managed on the standard data stack. After loading the library
                    floats can be entered directly at the command prompt. Some speed
                    sensitive words are available as assembly code as well.
                </para>
            </sect2>
            <sect2 id="ANS_LOCALS">
                <title>Locals</title>
                <para>amforth does not currently support locals.</para>
            </sect2>
            <sect2 id="ANS_MEMORY">
                <title>Memory Allocation</title>
                <para>
                    amforth does not support the words from the memory
                    allocation word set.
                </para>
            </sect2>
            <sect2 id="ANS_PROGRAMMING">
                <title>Programming Tools</title>
                <para>
                    Variants of the words
                    <command>.S</command>
                    ,
                    <command>?</command>
                    and
                    <command>DUMP</command>
                    are implemented or can easily be done. The word
                    <command>SEE</command>
                    is available as well.
                </para>
                <para>
                    <command>STATE</command>
                    works as specified.
                </para>
                <para>
                    The word
                    <command>WORDS</command>
                    does not sort the word list and does not take care
                    of screen sizes.
                </para>
                <para>
                    The words
                    <command>;CODE</command>
                    and
                    <command>ASSEMBLER</command>
                    are not supported. amforth has a loadable assembler
                    which can be used with the words
                    <command>CODE</command>
                    and
                    <command>END-CODE</command>
                    .
                </para>
                <para>
            	    The control stack commands
                    <command>CS-ROLL</command>
                    ,
                    <command>CS-PICK</command>
                    and
                    <command>AHEAD</command>
                    are not implemented. The compiler words operate with
                    the more traditional
                    <command>MARK</command>
                    /
                    <command>RESOLVE</command>
                    word pairs.
                </para>
                <para>
                    <command>FORGET</command>
                    is not implemented since it would be nearly impossible to
                    reset the search order word list with reasonable efforts.
                    The better way is using <command>MARKER</command>
                    from the library.
                </para>
                <para>An EDITOR is not implemented.</para>
                <para>
                    <command>[IF]</command>
                    ,
                    <command>[ELSE]</command>
                    and
                    <command>[THEN]</command>
                    are not implemented.
                </para>
            </sect2>
            <sect2 id="ANS_SEARCHORDER">
                <title>Word Lists and Search Order</title>
                <para>
                    Amforth supports the ANS Search Order Wordlist. A word list consist of a linked list
                    of words in the dictionary. There are no limits on the number of word lists 
                    defined. Only the length of the active search order is limited: There can be 
                    up to 8 entries at any given moment. This limit can be changed at compile 
                    time in the application definition file.
                </para>
                <para>
                    Internally the wordlist identifier is the address where the wordlist start
                    address is stored in the EEPROM. Creating a new word list means to allocate
                    a new EEPROM cell. Since the ANS standard does not give named wordlist
                    there is library code available that uses the old fashioned vocabulary.
                </para>
            </sect2>
            <sect2 id="ANS_STRING">
                <title>Strings</title>
                <para>
                    <command>SLITERAL</command>
                    ,
                    <command>CMOVE></command>
                    ,
                    <command>CMOVE</command>
                    ,
                    <command>COMPARE></command>
                    , and
                    <command>/STRING</command>
                    are implemented.
                </para>
                <para>
                    <command>-TRAILING</command>
                    ,
                    <command>BLANK</command>
                    ,
                    and
                    <command>SEARCH</command>
                    are not implemented.
                </para>
            </sect2>
        </sect1>
        <sect1 id="forth200x">
          <title>Forth 200x</title>
          <para>amforth provides the <command>defer/is</command>,
          <command>buffer:</command> and the <command>structure</command>
          extensions from the forth 200x standards.
        </para>
        <sect2 id="defer">
          <title>Defer and IS</title>
          <para><command>defer</command> give the possibility of vectored execution. Amforth
          has 3 different kind of such vectors, varying in how they are stored: EEPROM, RAM
          or the USER area. The EEPROM makes it possible to save the settings permanently,
          the RAM enables frequent changes. Finally the user area is for multitasking.</para>
        </sect2>
        <sect2 id="buffer">
          <title>Buffer:</title>
          <para>The buffer allocates a named memory (RAM) region. It is superior to
          the usual <code>create foo xx allot</code> since amforth has a non-unified
          memory model and the code snippet does not the same as an unified memory
          model forth (with the dictionary being at the same memory as the allot
          command works).</para>
        </sect2>
        <sect2 id="structure">
          <title>Structures</title>
          <para></para>
        </sect2>
        </sect1>
        <sect1 id="AMFORTH">
            <title>Amforth</title>
            <sect2 id="COLD"><title>COLD</title>
            <para>The startup code is in the file <filename>cold.asm</filename>.
            It gets called directly from the address 0 vector.
            </para>
            <para>This assembly part of the startup code creates the basic runtime environment
            to start the virtual forth machine. It sets up the stack pointers and
            the user pointer and places the forth instruction pointer on the 
            word <code>WARM</code>. Then it boots the forth virtual machine 
            by jumping to the inner interpreter.
            </para>
            <para>The start addresses of the stacks are placed to the user area 
            for later use as well.</para>
            </sect2>
            <sect2 id="WARM"><title>WARM</title>
            <para>The word <code>WARM</code> is the high level part of the 
            forth VM initialization. When called from
            within forth it is the equivalent to a RESET.
            <code>WARM</code> initializes the <code>PAUSE</code> 
            deferred word to do nothing, calls the application defined 
            <code>TURNKEY</code> action and finally hands over to <code>QUIT</code>.
            </para>
            </sect2>
            <sect2 id="TURNKEY"><title>TURNKEY</title>
            <para>The <code>turnkey</code> is a EEPROM deferred word that 
            points to an application specific startup word.
            </para>
            <para>Its main task is to initialize the character IO to enable 
            the forth interpreter to interact with the command prompt. The 
            examples shipped with amforth do this by "opening" the serial 
            port, switching to decimal number conversion and setting up the 
            character IO deferred words (KEY, EMIT etc).
            </para>
            </sect2>
            <sect2 id="QUIT"><title>QUIT</title>
            <para>QUIT initializes both data and return stack pointers by reading
            them from the user area and enters the traditional ACCEPT -- INTERPRET 
            loop that never ends. It provides the topmost exception catcher as
            well. Depending on the exception thrown, it prints an error message
            and restarts itself.</para>
            </sect2>
            <sect2 id="AMFORTH_MCU">
                <title>MCU Access</title>
                <para>
                    amforth provides wrapper words for the
                    microcontroller instructions
                    <command>SLEEP</command>
		    and
                    <command>WDR</command>
                    (watch dog reset). To work properly, the MCU needs
                    more configuration. amforth itself does not call
                    these words.
                </para>
                <para>
                    Microcontrollers supporting the JTAG interface can
                    be programmed to turn off JTAG at runtime. Similar
                    the watch dog timer can be disabled. Since both
                    actions require strict timing they need to be
                    implemented as primitives:
                    <command>-JTAG</command>
                    and
                    <command>-WDT</command>
                    .
                </para>
            </sect2>
	    
	    <sect2 id="AMFORTH_ASSEMBLER">
	       <title>Assembler</title>
	       <para>Lubos Pekny has written an assembler for amforth. To support it, amforth
	       provides the two words <code>CODE</code> and <code>END-CODE</code>. The first
	       creates a dictionary entry and sets the code field to the data filed address. The
	       interpreter will thus jump directly into the data field assuming some machine
	       code there. The word <code>END-CODE</code> places a <code>JUMP NEXT</code> into
	       the data field. This finishes the machine instruction execution and jumps back
	       to the forth interpreter.</para>
	    </sect2>
            <sect2 id="AMFORTH_MEMORY">
                <title>Memory</title>
                <para>
                    Atmega microcontroller have three different types of
                    memory. RAM, EEPROM and Flash. The words
                    <command>@</command>
                    and
                    <command>!</command>
                    work on the RAM address space (which includes IO
                    Ports and the CPU register), the words
                    <command>@e</command>
                    and
                    <command>!e</command>
                    operate on the EEPROM and
                    <command>@i</command>
                    and
                    <command>!i</command>
                    deal with the flash memory. All these words transfer
                    one cell (2 bytes) between the memory and the data
                    stack. The address is always the native address of
                    the target storage: byte-based for EEPROM and RAM,
                    word-based for flash. Therefore the flash addresses
                    64KWords or 128 KBytes address space.
                </para>
                <para>
                    External RAM shares the normal RAM address space
                    after initialization (which can be done in the
                    turnkey action). It is accessible without further
                    changes.
                </para>
                <para>
                    For RAM only there is the special word pair
                    <command>c@</command>
                    /
                    <command>c!</command>
                    which operate with the lower half of a stack cell.
                    The upper byte is either ignored or set to 0 (zero).
                </para>
                <para>
                    All other types of external memory need special
                    handling, which may be masked with the block word
                    set.
                </para>
            </sect2>
            <sect2 id="AMFORTH_IO">
                <title>Input Output</title>
                <para>
                    amforth uses character terminal IO. A serial console is
                    used. All IO is based upon the standard words
                    <command>EMIT</command>
                    /
                    <command>EMIT?</command>
                    and
                    <command>KEY</command>
                    /
                    <command>KEY?</command>
                    . Additionally the word
                    <command>/KEY</command>
                    is used to signal the sender to stop. All these
                    words are deferred words in the USER area and can be
                    changed with the
                    <command>IS</command>
                    command.
                </para>
                <para>
                    The predefined words use an interrupt driven IO with
                    a buffer for input and output. They do not implement
                    a handshake procedure (XON/XOFF or CTS/RTS). The
                    default terminal device is selected at compile time.
                </para>
                <para>
                    These basic words include a call to the
                    <command>PAUSE</command>
                    command to enable the use of multitasking.
                </para>
                <para>
                    Other IO depend on the hardware connected to the
                    microcontroller. Code exists to use LCD and TV
                    devices. CAN, USB or I2C are possible as well.
                    Another use of the redirect feature is the
                    following: consider some input data in external
                    EEPROM (or SD-Cards). To read it, the words
                    <command>KEY</command>
                    and
                    <command>KEY?</command>
                    can be redirected to fetch the data from them.
                </para>
            </sect2>
            <sect2 id="AMFORTH_STRING">
                <title>Strings</title>
                <para>
                    Strings can be stored in two areas: RAM and FLASH.
                    It is not possible to distinguish between the
                    storage areas based on the addresses found on the
                    data stack, it's up to the developer to keep track.
                </para>
                <para>
                    Strings are stored as counted strings with a 16 bit
		    counter value (1 flash cell)
                    Strings in flash are compressed: two consecutive
            	    characters (bytes) are placed into one flash cell. The standard
                    word
                    <command>S"</command>
                    copies the string from the RAM into flash using the
                    word
                    <command>S,</command>
                    .
                </para>
            </sect2>
        </sect1>
    </chapter>
