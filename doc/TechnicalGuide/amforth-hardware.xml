	<chapter id="Hardware">
		<title>Hardware</title>
		<sect1 id="Controller">
			<title>Controller</title>
			<para>amforth is designed to run on AVR Atmega
				microcontrollers. It requires
				ca 7KB flash memory for the basic
				system and can address 128KB of
				flash memory.
		</para>
			<para>The ATtiny microcontrollers and a a few ATmega types lack
				the minimum
				flash capacity. The ATtiny's some machine instructions as
				well. </para>
		<sect2 id="Bootloader">
			<title>Bootloader Support</title>
			<para>Most bootloaders will not work with amforth since they do
				not provide an
				application programming interface to rewrite a single
				flash cell. The default
				setup will thus replace any bootloader found
				with some core
				routines.</para>
			<para>
				It is possible to change the word
				<code>!i</code> to use an API and work
				with existing bootloaders. <code>!i</code>
				is a deferred word that can be re-targetted
				to more advanced words that may do address range
				checkings, write success checks or simply turn 
				on/off LEDs to visualize the flash programming.
			</para>
		</sect2>
		<sect2 id="Fuses">
			<title>Fuses</title>
			<para> Amforth uses the self programming feature of the ATmega
				microcontrollers to work with the dictionary. It is ok to use the
				factory default settings plus the changes for the oscillator
				settings. It is recommended to use a higher CPU frequency to meet
				the timing requirements of the serial terminal.</para>
			<para>
			    Fuses are the main cause for problems with the flash write operations.
			    If the <code>!i</code> operation fails, make sure that the code for
			    it is within the boot loader section. It is recommended to make the
			    bootloader section as large as the NRWW section, otherwise the basic
			    machine instruction spm may fail silently and the controller becomes
			    unresponsive.
			</para>
		</sect2>
		</sect1>
		<sect1 id="ExternalModules">
			<title>External Modules</title>
			<para>Most external modules are accessed with library modules.
            </para>
        </sect1>
	</chapter>
