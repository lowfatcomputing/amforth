<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

<book>
   <bookinfo>
      <title>amforth - Forth für AVR ATmega Mikrokontroller</title>
      <titleabbrev>amforth</titleabbrev>
      <author>
         <personname>
            <firstname>Matthias</firstname>
            <surname>Trute</surname>
         </personname>
         <email>mtrute@users.sourceforge.net</email>
      </author>

      <pubdate>2007</pubdate>
      <copyright>
         <year>2007</year>
         <holder>Matthias Trute</holder>
      </copyright>
   </bookinfo>
   <toc />
   <chapter id="chap-overview">
      <title>Überblick</title>
      <sect1 id="Introduction">
         <title>Einführung</title>
         <para>
            amforth ist ein Forth System für die AVR Atmega
            Mikrokontrollerfamilie. Es ist setzt keinerlei zusätzliche
            Hard- oder Software voraus
         </para>

         <para>
            amforth bietet ein nahezu komplettes ANS94 CORE Wordset.
            Hinzu kommen einige Worte der Extension Wordsets. Das
            tatsächlich genutzte Wordset kann einfach angepaßt werden.
         </para>

         <para>
            Das Dictionary befindet sich im Flashspeicher. Der
            eingebaute Compiler erweitert dieses unmittelbar.
         </para>

         <para>
            amforth bietet Zugriff auf alle Interruptquellen. Die
            Interrupt Service Routinen sind normale Forthworte.
         </para>

         <para>
            amforth ist unter der GNU General Public License Version 2
            veröffentlicht.
         </para>

         <para>
            Der Name
            <code>amforth</code>
            hat keine besondere Bedeutung.
         </para>
      </sect1>
      <sect1 id="History">
         <title>Geschichte</title>
         <para>
            amforth ist eine Implementierung "from scratch". Der erste
            Code entstand im Sommer 2006 mit dem Inneren Interpreter im
            AVR Studio (
            <code>amforth.asm</code>
            ). Die weitere Entwicklung erfolgte zunehmend mit realer
            Hardware, dann unter Linux.
         </para>
      </sect1>
      <sect1 id="Development">
         <title>Entwicklungsumgebung</title>
         <para>
            Die aktuelle Version von amforth wird mit den "kleineren"
            ATmegatypen mit bis zu 64KB Flash entwickelt.
         </para>

      </sect1>
      <sect1 id="Fuses">
         <title>Fuses</title>
         <para>
            amforth benutzt das Selfprogramming der ATmegas um in den
            eigenen Flash zu schreiben. Dieses darf durch die Fuses
            nicht behindert werden.
         </para>
      </sect1>
   </chapter>

   <chapter>
      <title>Architecture</title>

      <para>
         amforth ist ein 16 Bit Forth, das nach dem "Indirect Threading
         Model" arbeitet. Der Flashspeicher enthält das gesamte
         Dictionary, im EEPROM sind einige Systemeinstellungen
         gespeichert und ein (kleiner) Teil des RAM wird für die Stacks,
         die Interruptvektoren und die IO Buffer benötigt.
      </para>

      <para>
         amforth benutzt die meisten CPU Register. Folgende Daten werden
         in Registern gehalten: Der Datenstackpointer, der
         Instructionpointer, der Userpointer und das TOS Element. Der
         Hardwarestack des Kontrollers dient als Returnstack.
         Darüberhinaus werden temporär viele weitere Register belegt,
         ohne das sie vorab gesichert werden.
      </para>
      <sect1 id="VM_Implementaion">
         <title>CPU -- Forth VM Mapping</title>
         <para>
            Die FOrth VM benutzt einige Register für ihre Arbeit. Sie
            werden wie folgt auf die CPU Register abgebildet:
            <table>
               <title>Register Mapping</title>
               <tgroup cols="2">
                  <thead>
                     <row>
                        <entry>Forth Register</entry>
                        <entry>ATmega Register(s)</entry>
                     </row>
                  </thead>
                  <tbody>
                     <row>
                        <entry>W</entry>
                        <entry>R24:R25</entry>
                     </row>
                     <row>
                        <entry>IP (Intructionpointer)</entry>
                        <entry>XH:XL</entry>
                     </row>
                     <row>
                        <entry>RP (Return Stack Pointer)</entry>
                        <entry>SPH:SPL</entry>
                     </row>
                     <row>
                        <entry>DP (Data Stack Pointer)</entry>
                        <entry>YH:YL</entry>
                     </row>
                     <row>
                        <entry>TOS (Top Of (Data) Stack)</entry>
                        <entry>R6:R7</entry>
                     </row>
                     <row>
                        <entry>UP (User Pointer)</entry>
                        <entry>R4:R5</entry>
                     </row>

                  </tbody>
               </tgroup>
            </table>
            Zusätzlich werden die Register R16 bis R23 sowie ZH:ZL für
            temporäre Aufgaben genutzt.
         </para>

         <sect2>
            <title>Inner Interpreter</title>
            <para>
               Der Inner Interpreter setzt das "Indirect Threading
               Model" mit einer Erweiterung für das Interrupt Handling
               um.
            </para>
            <sect3>
               <title>EXECUTE</title>
               <para>
                  Execute reads the address the IP currently points to
                  and jumps to it.
               </para>
            </sect3>
            <sect3>
               <title>NEXT</title>
               <para>
                  The NEXT routine is basically standard. It needs to
                  perform two flash accesses, the second one is labeled
                  as EXECUTE.
               </para>

               <para>
                  The very first step in NEXT is to check whether an
                  interrupt needs to handled. It is done by looking at
                  the
                  <code>T</code>
                  flag in the machine status register. If it set, the
                  code jumps to the interrupt handling part. If cleared
                  the normal NEXT routine gets executed.
               </para>
            </sect3>
            <sect3>
               <title>NEST</title>
               <para>
                  NEST (or DO_COLON) pushed the current IP to the return
                  stack and loads the next flash from the data field of
                  the current word into the IP. Then it continues with
                  NEXT.
               </para>
            </sect3>
            <sect3>
               <title>UNNEST</title>
               <para>
                  The code for UNNEST is the word
                  <code>EXIT</code>
                  in the dictionary. It simply pops the IP from the
                  return stack and jumps to NEXT.
               </para>
            </sect3>
            <sect3>
               <title>DO_DOES</title>
               <para>
                  This code is the runtime that is used by the code
                  compiled by the forth word
                  <code>DOES</code>
                  . It it closly tight to the action performed by the
                  code compiled by DOES. That code pushed the current
                  address in the data field to the returnstack and jumps
                  to DO_DOES. DO_DOES gets that address back, saves the
                  current IP and sets the forth IP to the address it got
                  from the stack. Finally it continues with NEXT.
               </para>
            </sect3>
         </sect2>
      </sect1>
      <sect1 id="Memory_Layout">
         <title>Memory Layout</title>

         <sect2>
            <title>Flash Memory</title>
            <para>
               The flash memory can be divided into 4 different
               sections. The first section, starting at address 0,
               contains the interrupt vectors for the low level
               interrupt handling and a character string with the name
               of the controller in plain text.
            </para>

            <para>
               The next section is the initialization block. It is
               called whenver the controller starts up. The code sets up
               the basic infrastructure for the forth interpreter and
               provides a compile time hook for application specific
               initializations. This step is finished by calling the
               forth interpreter with the word COLD.
            </para>

            <para>
               The 3rd section contains the low level interrupt handling
               routines and the main dictionary. The interrupt handler
               is very closly tight to the inner interpreter. The reason
               that it is embedded into the dictionary is merely for
               ease of coding: the forth words for interrupt management
               are defined within the same source file. The same reason
               holds true for the usart terminal.
            </para>

            <para>New words are appended to this section.</para>

            <para>
               The last section is identical to the boot loader section
               of the ATmegas. It is known as NRWW too. Here is the
               heart of amforth: The inner interpreter and most of the
               words coded in Assembly language (so called primitives).
            </para>

            <para>
               The reason for this split is quit simple: to work with a
               dictionary in flash the controller needs to write to the
               flash. The ATmegas provide a mechanism called
               self-programming using a special instruction. This
               instruction basically can only work from the boot loader
               section. amforth uses this instruction in the word I!.
               Due to the fact that the self programming is a lot more
               then only a simple instruction, amforth needs most of the
               forth core system to achieve it. A side effect is that
               amforth cannot co-exist with classic bootloaders.
            </para>
            <sect3>
               <title>Flash Write</title>
               <para>
                  The only word doing the actual flash write operation
                  is I! (i-store). This word takes the value and the
                  address of a single cell to be written to flash from
                  the data stack.
               </para>
               <para>
                  The flash write strategy follows the atmel appnotes.
                  First step is turn off all interrupts. Then the
                  affected flash page is read into the flash page
                  buffer. While doing the copying it is checked whether
                  a flash erase cycle is needed. The flash erase can be
                  avoided if no bit it turned from 0 to 1. Only if a bit
                  switched from 0 to 1 a flash erase operation has to be
                  performed. In the fourth step the new flash page is
                  written and the flash is set back to normal operation
                  and the interrupt flag is restored.
               </para>
               <para>
                  This write strategy ensures that the flash has minimal
                  flash erase cycles while extending the dictionary. In
                  addition It keeps the forth system simple since it
                  does not need to deal with page sizes or even RAM
                  based buffers for dictionary operations.
               </para>
            </sect3>
         </sect2>
         <sect2>
            <title>EEPROM</title>
            <para>
               The build-in EEPROM holds some vital dictionary pointer
               and other persistant data. These take only a few EEPROM
               cells. The remaining space is available for user
               programs. The easiest way to use EEPROM is the use of
               forth VALUEs. There intended design pattern (read often,
               write seldom) is quite the same as for the EEPROM usage.
            </para>
         </sect2>
         <sect2>
            <title>RAM</title>
            <para>
               amforth needs a few RAM locations for it's internal data
               structures. The biggest part are the buffers for the
               terminal IO. RAM Memory is managed by the words VARIABLE
               and ALLOT.
            </para>

            <para>
               The RAM address space is divided into three sections: the
               first 32 addresses are the CPU registers. Then come the
               IO registers and extended IO registers and finally the
               RAM itself.
            </para>

            <para>
               With amforth all these sections can be access using there
               RAM address. That makes ist quite easy to work with words
               like C@.
            </para>
         </sect2>
      </sect1>
      <sect1 id="Core_System">
         <title>Core System</title>

         <sect2>
            <title>Threading Model</title>
            <para>
               amforth uses the indirect (classic) threaded variant of
               forth.
            </para>
         </sect2>
         <sect2>
            <title>Stacks</title>
            <sect3>
               <title>Data Stack</title>
               <para>
                  The data stack uses the CPU register pair yl:yh as
                  it's data pointer. The Top-Of-Stack element (TOS) is
                  in a register pair. Compared to a straight forward
                  implementation this approach saves both code space and
                  gives higher execution speed. Saving more stack
                  elements does not really give any more profit (much
                  more code and only little speed enhancements).
               </para>
               <para>
                  The data stack starts at a configurable distant below
                  the return stack (RAMEND) and grows downward.
               </para>
            </sect3>
            <sect3>
               <title>Return Stack</title>
               <para>
                  The Return Stack is the hardware stack of the
                  controller. It is managed with push/pop instructions.
                  The return stack starts at RAMEND und grows downward.
               </para>
            </sect3>
         </sect2>
         <sect2>
            <title>Interrupts</title>
            <para>
               amforth routes the low level interrupts into the forth
               inner interpreter. The inner interpreter switches the
               execution to a predefined word if an interrupt occurs.
               The interrupt handlers are completly normal forth words
               without any stack effect.
            </para>

            <para>
               The implementation of the interrupts takes two steps: The
               first one is responsible for the low level part. It is
               called whenever an interrupt occures. The code is the
               same for all interrupts. It takes the number of the
               interrupt from it's vector address and stores this in a
               RAM cell. Then the low level ISR sets a flag in the
               status register of the controller. The inner interpreter
               checks every time it is entered this flag and if it is
               set it switches to interrupt handling at forth level.
               This approach has an penalty of 2 CPU cycles for checking
               and (not) branching.
            </para>

            <para>
               The ISR at forth level is basically a RAM based table of
               the exection tokens associated with the interrupt number.
               If any of the
            </para>
         </sect2>
         <sect2>
            <title>Multitasking</title>

            <para>
               amforth does not really implement multi tasking. It only
               provides the basic framework for it. Within the IO words
               whenever possible the word PAUSE is called. This word is
               as a deferred word that is initialized to do nothing
               (NOOP).
            </para>
         </sect2>
      </sect1>
   </chapter>
</book>
